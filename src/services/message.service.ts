import { Injectable } from '@nestjs/common';
import { Context, Telegraf } from 'telegraf';
import { CustomContext } from '../context/context';
import { InjectBot } from 'nestjs-telegraf';
import { AppService } from './app.service';

@Injectable()
export class MessageService {
  constructor(
    @InjectBot() private readonly bot: Telegraf<Context>,
    private readonly appService: AppService,
  ) {}

  async handlePostMessage(ctx: CustomContext) {
    try {
      if (ctx.message && 'document' in ctx.message) {
        const fileId = ctx.message.document.file_id;
        const fileName = ctx.message.document.file_name;
        const fileLink = await ctx.telegram.getFileLink(fileId);

        ctx.scene.session.fileId = fileId;
        ctx.scene.session.fileName = fileName;
        ctx.scene.session.fileLink = fileLink.href;

        const {
          selectedDay,
          selectedMonth,
          selectedYear,
          selectedHour,
          selectedMinute,
        } = ctx.scene.session;
        const scheduledDate = new Date(
          parseInt(selectedYear),
          parseInt(selectedMonth) - 1,
          parseInt(selectedDay),
          parseInt(selectedHour),
          parseInt(selectedMinute),
        );

        ctx.scene.session.scheduledDate = scheduledDate;

        await ctx.reply(
          `–§–∞–π–ª ${fileName} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ ${scheduledDate}.`,
        );
      }
    } catch (error) {
      console.error('Error handling document message:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞.');
    }
  }

  async handleDocumentMessage(ctx: CustomContext) {
    try {
      if (ctx.message && 'document' in ctx.message) {
        const fileId = ctx.message.document.file_id;
        const fileName = ctx.message.document.file_name;

        // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª
        const fileLink = await ctx.telegram.getFileLink(fileId);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ AppService
        await this.appService.saveFile(fileId, fileName, fileLink.href);

        await ctx.reply(`–§–∞–π–ª ${fileName} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.`);
      } else {
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–∫—Ä–µ–ø–∫–∞.');
      }
    } catch (error) {
      console.error('Error handling document message:', error);

      if (
        error.response &&
        error.response.description &&
        error.response.description.includes('file is too big')
      ) {
        await ctx.reply(
          '–û—à–∏–±–∫–∞: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Ä–∞–∑–º–µ—Ä–æ–º –¥–æ 50 MB.',
        );
      } else {
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞.');
      }
    }
  }

  async handleTextMessage(ctx: CustomContext) {
    try {
      if (ctx.message && 'text' in ctx.message) {
        const searchText = ctx.message.text.trim();
        console.log('Searching for books with text:', searchText);

        // –ò—â–µ–º —É—á–µ–±–Ω–∏–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const foundBooks = await this.appService.findBookByTextSearch(
          searchText,
        );
        console.log('Found books:', foundBooks);

        if (foundBooks.length > 0) {
          const buttons = foundBooks.map((book, index) => ({
            text: `${index + 1}. ${book.fileName}`,
            callback_data: `file_${index}`,
          }));

          const inlineKeyboard = {
            inline_keyboard: buttons.map((button) => [button]),
          };

          await ctx.reply('–ù–∞–π–¥–µ–Ω—ã —É—á–µ–±–Ω–∏–∫–∏:', {
            reply_markup: inlineKeyboard,
          });

          ctx.scene.session.foundBooks = foundBooks;
        } else {
          await ctx.reply(`–ü–æ –∑–∞–ø—Ä–æ—Å—É "${searchText}" —É—á–µ–±–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.`);
        }
      }
    } catch (error) {
      console.error('Error in handleTextMessage:', error);

      if (error.response && error.response.description) {
        console.error('Telegram API Error:', error.response.description);
      }

      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —É—á–µ–±–Ω–∏–∫–∞.');
    }
  }

  async handlePhotoWithCaptionMessage(ctx: CustomContext) {
    try {
      if (ctx.message && 'photo' in ctx.message && 'caption' in ctx.message) {
        const photo = ctx.message.photo[ctx.message.photo.length - 1]; // –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        const fileId = photo.file_id;
        const caption = ctx.message.caption;
        const fileLink = await ctx.telegram.getFileLink(fileId);
        const timePost = new Date();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –∏ –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ AppService
        await this.appService.savePhoto(
          fileId,
          fileLink.href,
          caption,
          timePost,
        );

        await ctx.reply(`–§–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º "${caption}" —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.`, {
          reply_markup: {
            inline_keyboard: [
              [{ text: '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç', callback_data: 'publish_post' }],
              [{ text: '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç', callback_data: 'schedule_post' }],
              [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back' }],
            ],
          },
        });
      } else {
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º.');
      }
    } catch (error) {
      console.error('Error handling photo with caption message:', error);

      if (
        error.response &&
        error.response.description &&
        error.response.description.includes('file is too big')
      ) {
        await ctx.reply(
          '–û—à–∏–±–∫–∞: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Ä–∞–∑–º–µ—Ä–æ–º –¥–æ 50 MB.',
        );
      } else {
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–µ–≥–æ —Ñ–æ—Ç–æ.');
      }
    }
  }

  async schedulePost(ctx: Context, fileId: string, scheduledDate: Date) {
    // –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø–æ—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π fileId
    if (fileId) {
      await ctx.reply(`–ü–æ—Å—Ç —Å —Ñ–∞–π–ª–æ–º ${fileId} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω.`);
    } else {
      await ctx.reply('–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.');
    }
  }
}
