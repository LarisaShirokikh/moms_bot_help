import { Injectable, UseGuards } from '@nestjs/common';
import {
  Action,
  Ctx,
  Hears,
  On,
  Scene,
  SceneEnter,
} from 'nestjs-telegraf';
import { CustomContext } from 'src/context/context';
import { bottonsForAdmin } from 'src/keyboards/keyboard';
import { PostService } from 'src/services/post.service';
import { Markup } from 'telegraf';
import { MessageService } from 'src/services/message.service';
import { getCalendarKeyboard } from 'src/lib/calendar';
import { getTimeKeyboard } from 'src/lib/timeKeyboard';


@Injectable()
@Scene('adminScene')
export class AdminScene {
  constructor(
    private readonly postService: PostService,
    private readonly messageService: MessageService,
  ) {}

  @SceneEnter()
  async start(@Ctx() ctx: CustomContext) {
    try {
      const user = ctx.from;
      const username = user.username || user.first_name;
      const isAdmin = username === 'LoraSher';
      if (isAdmin) {
        await ctx.reply(`${username} –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?`, bottonsForAdmin());
      } else {
        await ctx.reply('–ü—Ä–æ—Å—Ç–∏—Ç–µ, –≤—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä');
        await ctx.scene.leave();
      }
    } catch (error) {
      console.error('Error in startCommand:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.');
    }
  }

  @Action('auto_post')
  async enterAutoPost(@Ctx() ctx: CustomContext) {
    const buttons = Markup.inlineKeyboard([
      Markup.button.callback('üöó –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç', 'add_auto_post'),
      Markup.button.callback('üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç', 'stop_auto_post'),
    ]);

    await ctx.replyWithHTML('–ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥?', buttons);
  }

  @Action('add_auto_post')
  async handleAddAutoPost(@Ctx() ctx: CustomContext) {
    await this.postService.handleScheduledPost(ctx);
    await ctx.replyWithHTML('–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω.');
    const user = ctx.from;
    const username = user.username || user.first_name;
    await ctx.reply(
      `${username} –ß—Ç–æ —á—Ç–æ —Ç–æ –µ—â–µ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?`,
      bottonsForAdmin(),
    );
  }

  @Action('add_schedule')
  async enterAddPostScene(@Ctx() ctx: CustomContext) {
    await ctx.scene.enter('postScene');
  }

  @Action('add_book')
  async enterAddFileScene(@Ctx() ctx: CustomContext) {
    await ctx.replyWithHTML(
      '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ —Å–∫—Ä–µ–ø–∫—É',
    );
  }

  @On('document')
  async addFile(@Ctx() ctx: CustomContext) {
    try {
      await this.messageService.handleDocumentMessage(ctx);
      const user = ctx.from;
      const username = user.username || user.first_name;
      await ctx.reply(
        `${username} –ß—Ç–æ —á—Ç–æ —Ç–æ –µ—â–µ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?`,
        bottonsForAdmin(),
      );
    } catch (error) {
      console.error('Error handling file upload:', error);
    }
  }

}
